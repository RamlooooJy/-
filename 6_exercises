#include <iostream>
#include <vector>
#include <math.h>
#include <stdlib.h>

using namespace std;
// Дан массив N вещественных чиселю
//Разделите все целые элементы массива на 2.   !!!!!!!!!!!!!!!!!!!
// Удалить из массива элементы, модуль которых находится в заданном диапазоне [a,b] !!!!!!!!!!!
//Если в массиве есть отрицательные элементы, то найти наибольший номер отрицательного элемента(самый правый)!!!!!!!!!!!!
// Отсортировать по возрастанию вторую половину массива !!!!!
//  Преобразовать массив таким образом, чтобы сначала располагались все элементы равные нулю,
// а потом все остальные в порядке следования !!!!!!!!!!!
//  Если элементы, расположенные левее первого МАКСИМАЛЬНОГО,упорядочены в порядке УБЫВАНИЯ то найти
// среднее арифметическое элементов, расположенных за ПОСЛЕДНИМ ПОЛОЖИТЕЛЬНЫМ МИНИМАЛЬНЫМ элементом !!!!!!!!

class VEC{
private:
    vector<double> a;
    int whole;    //целая часть
    double frac;  // Дробная часть
public:
    VEC(){
        whole=0;
        frac=0;
        /*for(int i = 0; i < 10; i++){
            a.push_back(-5+rand()%15);

        }*/
        // it`s for good working 7 paragraph
        //else you can use rand in commits above this
        a.push_back(7);
        a.push_back(2);
        a.push_back(0);
        a.push_back(9);
        a.push_back(6);
        a.push_back(-5);
        a.push_back(2);
        a.push_back(-4);
        a.push_back(9);
        a.push_back(9);

    };
    void divide(){
        cout << endl;
        for (int i = 0; i < a.size(); i++)
        {
            // 1.5

            whole = (int) a[i];  //Целая часть хранится      1,2,3,4,5
            frac = a[i]-whole;   // Дробная часть хранится   0.5
            if(frac==0){
                a[i]/=2;
            }
            cout <<"  " << a[i] << "  ";


            whole = 0;
            frac = 0;
        }
        cout << endl;

    }
    double getSize(){
        //возвраt
        return a.size();

    }
    void getVec(){
        cout << endl;
        for(int i=0;i<a.size();i++){
            cout<<"  " <<a[i]<<"  ";
        }
        cout << endl;

    }
    int getLastNegative(){
        int lastNeg= 0;
        for(int i=0;i<a.size();i++){
            if(a[i]<0)
                lastNeg=i;
        }
        cout << endl;
        return lastNeg;
    }
    void delElementInRange(double minnum,double maxnum){
        for(int i=0; i<a.size();i++){
            if(((abs(a[i])>=minnum)  &&  (abs(a[i])<=maxnum))){
                a.erase(a.begin()+i);
                i--;
            }
        }
        getVec();
        cout<<endl;
    }

    void getSortVec(){
        sort(a.begin()+5,a.end());
        getVec();
        cout<<endl;
        return;
    }
    void getNullInFirst(){
        //    1 2 3 4 0 6 7 0 9
        for(int i =0; i<a.size(); i++){
            if(a[i]==0){
                int z = a[i];
                a.erase(a.begin()+i);
                i--;
                reverse(a.begin(),a.end());
                a.push_back(z);
                reverse(a.begin(),a.end());
            }
        }
        getVec();
        return;

    }

    void NayTi_KamenSchast_ya(){
        double midlArifmSum=0.0;
        int amountnumFromLastMinNum;
        int max=0;
        int min=444;
        int indexMin=0;
        for (int i =0; i<a.size(); i++){
            if(a[i]>max){
                max=a[i]; // максимальный
            }

        }
        for (int i =0; i<a.size(); i++){
            if(a[i]<=min&&a[i]>0){
                min=a[i];
                indexMin=i;
            }
        }
        cout <<endl<<" MAX :  "<<max;
        cout <<endl<<" MIN :  "<<min<<endl;
        amountnumFromLastMinNum=a.size()-1-indexMin;
        for (int i =0; i<a.size(); i++){
           if(a[i]==max){                      // нашли дальше цикл не нужен
                    for(int j=0; j<i; j++){
                    if(a[j]>=a[j+1])             // условие верно дальше проверяем условие минимума
                        continue;

                    else if(j+1==i){
                        break;
                    }
                    else {
                        cout<<"error"<<endl;
                        return;
                        }

                    }
                    for(int j=indexMin+1; j<a.size(); j++){ //не включая последний минимум
                        midlArifmSum +=a[j];
                    }
                    midlArifmSum/=amountnumFromLastMinNum;
                    cout<<endl<<"Среднее арифметическое  "<<midlArifmSum<<endl;
               break;

           }
        }

    }


};

int main()
{
    VEC arr;

    while(true){
        int n;
        cout<<"1   Вывод"<<endl;
        cout<<"2   Divide"<<endl;
        cout<<"3   last"<<endl;
        cout<<"4   DELETE range"<<endl;
        cout<<"5   Sort second part"<<endl;
        cout<<"6   Nulls and after num "<<endl;
        cout<<"7   С бодуна  "<<endl;


        cin>>n;
        switch (n){
            case 1:
                cout<<"Array: "<<endl;
                arr.getVec();
                break;
            case 2:
                cout<<"Divide"<<endl;
                arr.divide();
            case 3:
                cout<<endl<<"Last negative element have number:   "<<arr.getLastNegative()<<endl;
                break;
            case 4:
                cout<<"elements after deleting"<<endl;
                arr.delElementInRange(4,5);
                break;
            case 5:
                cout<<"sort second part"<<endl;
                arr.getSortVec();
                break;
            case 6:
                cout<<"Nulls and after num "<<endl;
                arr.getNullInFirst();
                break;
            case 7:
                cout<<"Среднее арифметическое "<<endl;
                arr.NayTi_KamenSchast_ya();
                break;
            default:
                return 0;
        }



    }
}




//    1 2 3 4 0 6 7 0 9
